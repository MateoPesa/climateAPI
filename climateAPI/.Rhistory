# Test with only one year of data available
data_one_year <- extract_data(3047, start=2023-01-01, end=2024-01-01)
# Test with only one year of data available
data_one_year <- extract_data(3047, start='2023-01-01', end='2024-01-01')
devtools::test()
devtools::load_all()
temp_trends(3047)
devtools::load_all()
devtools::test()
result <- temp_trends(3047)
expect_type(result$Station_ID, "numeric")
expect_type(result['Station_ID'], "numeric")
expect_type(result['Intercept'], "numeric")
#make sure that all results are numeric
test_that("Returned result contains expected elements and data types", {
result <- temp_trends(3047)
expect_type(result['Station_ID'], "double")
expect_type(result['Intercept'], "double")
expect_type(result['Slope'], "double")
expect_type(result['PValue'], "double")
})
#make sure pvalue is between 0 and 1
test_that("P-value falls within the range [0, 1]", {
result <- temp_trends(3047)
expect_true(result$PValue >= 0 && result$PValue <= 1)
})
#make sure pvalue is between 0 and 1
test_that("P-value falls within the range [0, 1]", {
result <- temp_trends(3047)
expect_true(result['PValue'] >= 0 && result['PValue'] <= 1)
})
devtools::test()
devtools::check()
devtools::document()
library(climateAPI)
extract_data(3047)
yearly_cycle(3047)
america_grid(15)
devtools::check()
devtools::check()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
test_that("All points fall within American lines" , {
griddy <- america_grid(100)
usmap <- map('usa', plot=FALSE)
wheres <- map.where('usa', griddy)
expect_false(all(sapply(wheres, is.na)))
})
wheres <- map.where('usa', griddy)
griddy <- america_grid(100)
usmap <- map('usa', plot=FALSE)
wheres <- map.where('usa', griddy)
library('climateAPI')
devtools::document()
devtools::check()
usethis::use_tidy_description()
usethis::use_package("dplyr")
usethis::use_package("ggplot2")
usethis::use_package("usethis")
usethis::use_package("maps")
usethis::use_package("GpGp")
devtools::document()
devtools::check()
@importFrom <dplyr> <filter>
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
save(daily_data, file="../daily_data.rda")
load_all()
load_all()
dat <- daily_data
save(daily_data, file="../daily_data.rda")
save(stations,file='../stations.rda')
load_all()
document()
load_all()
document()
library(climateAPI)
library(climateAPI)
devtools::load_all(".")
devtools::load_all()
devtools::load_all()
source("~/STSCI4520/myWork/finalProject/climateAPI/R/data.R", echo=TRUE)
load("~/STSCI4520/myWork/finalProject/climateAPI/data/daily_data.RData")
load("~/STSCI4520/myWork/finalProject/climateAPI/data/stations.RData")
devtools::load_all()
head(daily_data)
devtools::check()
devtools::document()
devtools::document()
devtools::load_all()
devtools::check()
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
?data
usethis::use_data(daily_data)
usethis::use_data(stations)
devtools::document()
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
?mea
?mean
devtools::check()
devtools::test()
View(daily_data)
temp_trends(53877)
temp_trends(3047)
devtools::load_all()
temp_trends(3047)
rlang::last_trace()
devtools::document()
devtools::load_all()
devtools::document()
devtools::test()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::check()
devtools::load_all()
library(climateAPI)
install.packages('climateAPI_0.1.0.tar.gz')
install.packages('climateAPI_0.1.0.tar.gz', type="source", repos=NULL)
getwd()
install.packages('../climateAPI_0.1.0.tar.gz', type="source", repos=NULL)
#Stations we'd like to analyze
station_ids <-
c(26494, 53156, 4223, 64756, 4131, 3072, 54810, 53007, 92821, 21514)
#Assigning station names for legend
names(station_ids) <-
c(
"Fairbanks, AK",
"Phoenix, AZ",
"Darrington, WA",
"Ithaca, NY", #Hello Ithaca!
"Moose, WY",
"Bronte, TX",
"Chatham, MI",
"Colorado Springs, CO",
"Titusville, FL",
"Mauna Loa, HI"
)
#initialize a dataframe
all_data <- data.frame()
# Loop through each station ID, get the yearly cycle data, and append to the dataframe
for (i in 1:length(station_ids)) {
yearly_cycle_data <- yearly_cycle(station_ids[i])
yearly_cycle_data$Station <- names(station_ids)[i]
all_data <- rbind(all_data, yearly_cycle_data)
}
# Plot the yearly cycles grouped by station
ggplot(all_data, aes(x = Day, y = Predicted_Temp, color = as.factor(Station))) +
geom_line() +
labs(title = "Yearly Temperature Cycles for Different Stations",
x = "Day of Year",
y = "Predicted Temperature") +
scale_color_discrete(name = "Station") +
theme_minimal()
rmarkdown::all_output_formats()
rmarkdown::all_output_formats(vignette.Rmd)
rmarkdown::all_output_formats(/vignettes/vignette.Rmd)
rmarkdown::all_output_formats('/vignettes/vignette.Rmd')
getwd()
# Loop through each station ID, get the yearly cycle data, and append to the dataframe
stations.analyze <- stations[-c(213,235,236,237),] #Remove incomplete data
#Initialize a dataframe
all_data_temp <- data.frame(matrix(NA,ncol=4,nrow=nrow(stations.analyze)))
for (i in 1:nrow(stations.analyze)) {
trend_data <- temp_trends(stations.analyze[i, 'Station_ID'])
all_data_temp[i,] <- trend_data
}
View(all_data_temp)
#Assign column names
colnames(all_data_temp) <- c("Station_ID","Intercept","Slope", "PValue")
#Add Lat and Lon for interpolation
all_data_temp$LONGITUDE <-stations.analyze$Longitude
all_data_temp$LATITUDE <- stations.analyze$Latitude
#Only Contiguous USA
us_map <- map_data("usa")
inside <- map.where('usa', all_data_temp[,5:6])
inside.logical <- ifelse(is.na(inside), FALSE, TRUE)
contig.data.temp <- all_data_temp[inside.logical,]
#Differentiate between significant or not
contig.data.temp$Point_Shape <- ifelse(contig.data.temp$PValue <= 0.05, 1, 3)
View(contig.data.temp)
contig.data.temp <- contig.data.temp %>%  mutate_all(as.numeric)
library(dplyr)
contig.data.temp <- contig.data.temp %>%  mutate_all(as.numeric)
# Create a ggplot object for the US map
ggplot() +
geom_polygon(data = us_map,
aes(x = long, y = lat, group = group),
fill = "lightgray") +
geom_point(data = contig.data.temp,
aes(x = as.numeric(LONGITUDE), y = as.numeric(LATITUDE)),
col = ifelse(sign(contig.data.temp$Slope) > 0, "blue", "red"),
size = 10 * contig.data.temp$Slope,
pch = contig.data.temp$Point_Shape) +
scale_color_identity() +
labs(title ='Temperature Trends at Stations',
x = "Longitude",
y = "Latitude",
subtitle = "Blue = Positive, Circle=Significant, Size=Size of Yearly Change"
)
ifelse(contig.data.temp$PValue <= 0.05, 1, 3)
contig.data.temp$Point_Shape <- ifelse(contig.data.temp$PValue <= 0.05, 1, 3)
contig.data.temp$Point_Shape
contig.data.temp$PValue
contig.data.temp$PValue >=0.05
contig.data.temp[contig.data.temp>=0.05,'PValue']
contig.data.temp[contig.data.temp$PValue>=0.05,'PValue']
#Differentiate between significant or not
contig.data.temp$Point_Shape <- ifelse(contig.data.temp$PValue <= 0.05, '1', '3')
# Create a ggplot object for the US map
ggplot() +
geom_polygon(data = us_map,
aes(x = long, y = lat, group = group),
fill = "lightgray") +
geom_point(data = contig.data.temp,
aes(x = as.numeric(LONGITUDE), y = as.numeric(LATITUDE)),
col = ifelse(sign(contig.data.temp$Slope) > 0, "blue", "red"),
size = 10 * contig.data.temp$Slope,
pch = contig.data.temp$Point_Shape) +
scale_color_identity() +
labs(title ='Temperature Trends at Stations',
x = "Longitude",
y = "Latitude",
subtitle = "Blue = Positive, Circle=Significant, Size=Size of Yearly Change"
)
#Differentiate between significant or not
contig.data.temp$Point_Shape <- ifelse(contig.data.temp$PValue <= 0.05, 1, 3)
# Create a ggplot object for the US map
ggplot() +
geom_polygon(data = us_map,
aes(x = long, y = lat, group = group),
fill = "lightgray") +
geom_point(data = contig.data.temp,
aes(x = as.numeric(LONGITUDE), y = as.numeric(LATITUDE)),
col = ifelse(sign(contig.data.temp$Slope) > 0, "blue", "red"),
size = 10 * contig.data.temp$Slope,
pch = contig.data.temp$Point_Shape) +
scale_color_identity() +
labs(title ='Temperature Trends at Stations',
x = "Longitude",
y = "Latitude",
subtitle = "Blue = Positive, Circle=Significant, Size=Size of Yearly Change"
)
contig.data.temp <- contig.data.temp %>%  mutate_all(as.numeric)
# Create a ggplot object for the US map
ggplot() +
geom_polygon(data = us_map,
aes(x = long, y = lat, group = group),
fill = "lightgray") +
geom_point(data = contig.data.temp,
aes(x = as.numeric(LONGITUDE), y = as.numeric(LATITUDE)),
col = ifelse(sign(contig.data.temp$Slope) > 0, "blue", "red"),
size = 10 * contig.data.temp$Slope,
pch = contig.data.temp$Point_Shape) +
scale_color_identity() +
labs(title ='Temperature Trends at Stations',
x = "Longitude",
y = "Latitude",
subtitle = "Blue = Positive, Circle=Significant, Size=Size of Yearly Change"
)
#Significant data only for interpolation
significant.data <- contig.data.temp |> filter(PValue < 0.05)
#Data for interpolation (Original dataframe doesn't work)
significant.data.2 <- as.data.frame(
cbind(as.numeric(significant.data$LONGITUDE),
as.numeric(significant.data$LATITUDE),
as.numeric(significant.data$Slope)))
colnames(significant.data.2) <- c("LONGITUDE","LATITUDE","Slope")
#Interpolate data, create plot, and plot
map.5 <- interpolate_data('Slope', significant.data.2)
plot8 <- plot_predictions(map.5)
plot8 +   scale_colour_gradient(
low = "royalblue3",
high = "firebrick1",
limits = c(-0.2, 0.17), name="Slope"
)
View(map.5)
is.na(map.5$Slope)
which(is.na(map.5$Slope))
plot8 +   scale_colour_gradient(
low = "royalblue3",
high = "firebrick1",
limits = c(-0.25, 0.2), name="Slope"
)
plot8 +   scale_colour_gradient(
low = "royalblue3",
high = "firebrick1",
limits = c(-0.3, 0.2), name="Slope"
)
plot8 +   scale_colour_gradient(
low = "royalblue3",
high = "firebrick1",
limits = c(-0.5, 0.2), name="Slope"
)
plot8 +   scale_colour_gradient(
low = "royalblue3",
high = "firebrick1",
limits = c(-0.8, 0.2), name="Slope"
)
plot8 +   scale_colour_gradient(
low = "royalblue3",
high = "firebrick1",
limits = c(-6, 0.2), name="Slope"
)
plot8 <- plot8 |> filter(Slope > -1)
#Cluster of datapoints that have far too low of slopes. Assume due to vacancy
#of data and remove
map.5 <- map.5 |> filter(Slope > -1)
plot8 <- plot_predictions(map.5)
plot8 +   scale_colour_gradient(
low = "royalblue3",
high = "firebrick1",
limits = c(-0.3, 0.2), name="Slope"
)
significant.data.2
view(significant.data.2)
View(significant.data.2)
#Significant data only for interpolation
significant.data <- contig.data.temp |> filter(PValue < 0.05 & Slope >-1)
#Data for interpolation (Original dataframe doesn't work)
significant.data.2 <- as.data.frame(
cbind(as.numeric(significant.data$LONGITUDE),
as.numeric(significant.data$LATITUDE),
as.numeric(significant.data$Slope)))
colnames(significant.data.2) <- c("LONGITUDE","LATITUDE","Slope")
#Interpolate data, create plot, and plot
map.5 <- interpolate_data('Slope', significant.data.2)
#Cluster of datapoints that have far too low of slopes. Assume due to vacancy
#of data and remove
plot8 <- plot_predictions(map.5)
plot8 +   scale_colour_gradient(
low = "royalblue3",
high = "firebrick1",
limits = c(-0.3, 0.2), name="Slope"
)
plot8 +   scale_colour_gradient(
low = "royalblue3",
high = "firebrick1",
limits = c(-0.7, 0.2), name="Slope"
)
plot8 +   scale_colour_gradient(
low = "royalblue3",
high = "firebrick1",
limits = c(-0.92, 0.2), name="Slope"
)
plot8 +   scale_colour_gradient(
low = "royalblue3",
high = "firebrick1",
limits = c(-0.92, 1.2), name="Slope"
)
#Assign column names
colnames(all_data_temp) <- c("Station_ID","Intercept","Slope", "PValue")
#Add Lat and Lon for interpolation
all_data_temp$LONGITUDE <-stations.analyze$Longitude
all_data_temp$LATITUDE <- stations.analyze$Latitude
#Only Contiguous USA
us_map <- map_data("usa")
inside <- map.where('usa', all_data_temp[,5:6])
inside.logical <- ifelse(is.na(inside), FALSE, TRUE)
contig.data.temp <- all_data_temp[inside.logical,]
#Differentiate between significant or not
contig.data.temp$Point_Shape <- ifelse(contig.data.temp$PValue <= 0.05, 1, 3)
contig.data.temp <- contig.data.temp %>%  mutate_all(as.numeric)
all_data_temp <- all_data_temp[,1:4]
View(all_data_temp)
#Assign column names
colnames(all_data_temp) <- c("Station_ID","Intercept","Slope", "PValue")
#Add Lat and Lon for interpolation
all_data_temp$LONGITUDE <-stations.analyze$Longitude
all_data_temp$LATITUDE <- stations.analyze$Latitude
#Only Contiguous USA
us_map <- map_data("usa")
inside <- map.where('usa', all_data_temp[,5:6])
inside.logical <- ifelse(is.na(inside), FALSE, TRUE)
contig.data.temp <- all_data_temp[inside.logical,]
#Differentiate between significant or not
contig.data.temp$Point_Shape <- ifelse(contig.data.temp$PValue <= 0.05, 1, 3)
contig.data.temp <- contig.data.temp %>%  mutate_all(as.numeric)
# Create a ggplot object for the US map
ggplot() +
geom_polygon(data = us_map,
aes(x = long, y = lat, group = group),
fill = "lightgray") +
geom_point(data = contig.data.temp,
aes(x = as.numeric(LONGITUDE), y = as.numeric(LATITUDE)),
col = ifelse(sign(contig.data.temp$Slope) > 0, "blue", "red"),
size = 10 * contig.data.temp$Slope,
pch = contig.data.temp$Point_Shape) +
scale_color_identity() +
labs(title ='Temperature Trends at Stations',
x = "Longitude",
y = "Latitude",
subtitle = "Blue = Positive, Circle=Significant, Size=Size of Yearly Change"
)
# Create a ggplot object for the US map
ggplot() +
geom_polygon(data = us_map,
aes(x = long, y = lat, group = group),
fill = "lightgray") +
geom_point(data = contig.data.temp,
aes(x = as.numeric(LONGITUDE), y = as.numeric(LATITUDE)),
col = ifelse(sign(contig.data.temp$Slope) > 0, "blue", "red"),
size = 10 * contig.data.temp$Slope,
pch = contig.data.temp$Point_Shape) +
scale_color_identity() +
labs(title ='Temperature Trends at Stations',
x = "Longitude",
y = "Latitude",
subtitle = "Blue = Positive, Circle=Significant, Size=Size of Yearly Change"
)
#Differentiate between significant or not
contig.data.temp$Point_Shape <- ifelse(contig.data.temp$PValue <= 0.05, 1, 3)
# Create a ggplot object for the US map
ggplot() +
geom_polygon(data = us_map,
aes(x = long, y = lat, group = group),
fill = "lightgray") +
geom_point(data = contig.data.temp,
aes(x = as.numeric(LONGITUDE), y = as.numeric(LATITUDE)),
col = ifelse(sign(contig.data.temp$Slope) > 0, "blue", "red"),
size = 10 * contig.data.temp$Slope,
pch = contig.data.temp$Point_Shape) +
scale_color_identity() +
labs(title ='Temperature Trends at Stations',
x = "Longitude",
y = "Latitude",
subtitle = "Blue = Positive, Circle=Significant, Size=Size of Yearly Change"
)
# Create a ggplot object for the US map
ggplot() +
geom_polygon(data = us_map,
aes(x = long, y = lat, group = group),
fill = "lightgray") +
geom_point(data = contig.data.temp,
aes(x = as.numeric(LONGITUDE), y = as.numeric(LATITUDE)),
col = ifelse(sign(contig.data.temp$Slope) > 0, "blue", "red"),
size = 10 * contig.data.temp$Slope,
pch = contig.data.temp$Point_Shape) +
scale_color_identity() +
labs(title ='Temperature Trends at Stations',
x = "Longitude",
y = "Latitude",
subtitle = "Blue = Positive, Circle=Significant, Size=Size of Yearly Change"
)
#Only Contiguous USA
us_map <- map_data("usa")
inside <- map.where('usa', all_data_temp[,5:6])
inside.logical <- ifelse(is.na(inside), FALSE, TRUE)
contig.data.temp <- all_data_temp[inside.logical,]
#Differentiate between significant or not
contig.data.temp$Point_Shape <- ifelse(contig.data.temp$PValue <= 0.05, 1, 3)
contig.data.temp <- contig.data.temp %>%  mutate_all(as.numeric)
contig.data.temp$Point_Shape <- ifelse(contig.data.temp$PValue <= 0.05, 1, 3)
# Create a ggplot object for the US map
ggplot() +
geom_polygon(data = us_map,
aes(x = long, y = lat, group = group),
fill = "lightgray") +
geom_point(data = contig.data.temp,
aes(x = as.numeric(LONGITUDE), y = as.numeric(LATITUDE)),
col = ifelse(sign(contig.data.temp$Slope) > 0, "blue", "red"),
size = 10 * contig.data.temp$Slope,
pch = contig.data.temp$Point_Shape) +
scale_color_identity() +
labs(title ='Temperature Trends at Stations',
x = "Longitude",
y = "Latitude",
subtitle = "Blue = Positive, Circle=Significant, Size=Size of Yearly Change"
)
#Significant data only for interpolation
significant.data <- contig.data.temp |> filter(PValue < 0.05 & Slope >-1)
#Data for interpolation (Original dataframe doesn't work)
significant.data.2 <- as.data.frame(
cbind(as.numeric(significant.data$LONGITUDE),
as.numeric(significant.data$LATITUDE),
as.numeric(significant.data$Slope)))
colnames(significant.data.2) <- c("LONGITUDE","LATITUDE","Slope")
#Interpolate data, create plot, and plot
map.5 <- interpolate_data('Slope', significant.data.2)
#Cluster of datapoints that have far too low of slopes. Assume due to vacancy
#of data and remove
plot8 <- plot_predictions(map.5)
plot8 +   scale_colour_gradient(
low = "royalblue3",
high = "firebrick1",
limits = c(-0.92, 1.2), name="Slope"
)
